import os
import json
from aiogram import Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from core.module import ModuleManager
import logging

logger = logging.getLogger(__name__)

def setup_handlers(router: Router, bot: Bot, module_manager: ModuleManager, admin_checker, group_settings):
    
    @router.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} –≤ —á–∞—Ç—ñ {message.chat.id}")
        
        data = await state.get_data()
        
        if "started" not in data:
            welcome_message = (
                "üëã –ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç!\n\n"
                "–Ø ‚Äî *TetraCore*, –≤–∞—à –≤—ñ—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ Telegram. üåê\n\n"
                "–ú–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–æ—Å–≤—ñ–¥ —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ç—É–∂–Ω–∏—Ö —ñ –∫–æ—Ä–∏—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤. "
                "–ó—ñ –º–Ω–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —ñ–≥—Ä–∏ üéÆ, –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä—É–ø–æ—é ‚öôÔ∏è, —ñ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! "
                "–ü—Ä–æ—Å—Ç–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /menu, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó.\n\n"
                "üí° *–ü–æ—Ä–∞–¥–∞*: –Ø–∫—â–æ –≤–∏ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –¥–æ–ø–æ–º–æ–≥–∏, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ!"
            )
            await message.answer(welcome_message, parse_mode="Markdown")
            
            await state.update_data(started=True)
        else:
            await menu_command_handler(message)

    @router.message(Command("activate"))
    async def activate_module_handler(message: Message) -> None:
        if message.chat.type != 'private':
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) > 1:
                module_name = command_parts[1]
                if await module_manager.check_admin_rights(message):
                    await module_manager.activate_module(message, module_name)
            else:
                await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /activate [–Ω–∞–∑–≤–∞_–º–æ–¥—É–ª—è]")
        else:
            await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")

    @router.message(Command("menu"))
    async def menu_command_handler(message: Message) -> None:
        modules_path = "modules/"
        
        total_modules = 0
        pro_modules = 0
        pro_plus_modules = 0
        game_modules = 0
        group_modules = 0
        utility_modules = 0
        other_modules = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –º–æ–¥—É–ª—è—Ö —ñ —Ä–∞—Ö—É—î–º–æ —ó—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for module_name in os.listdir(modules_path):
            module_dir = os.path.join(modules_path, module_name)
            if os.path.isdir(module_dir):
                module_info_path = os.path.join(module_dir, "module_info.json")
                if os.path.exists(module_info_path):
                    with open(module_info_path, "r") as f:
                        module_info = json.load(f)
                        total_modules += 1
                        category = module_info.get("category", "–Ü–Ω—à–µ")
                        access_level = module_info.get("access_level", "free")
                        
                        if access_level == "pro":
                            pro_modules += 1
                        elif access_level == "pro_plus":
                            pro_plus_modules += 1

                        if category == "–Ü–≥—Ä–∏":
                            game_modules += 1
                        elif category == "–ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó":
                            group_modules += 1
                        elif category == "–ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏":
                            utility_modules += 1
                        else:
                            other_modules += 1
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–æ–¥—É–ª—ñ
        menu_message = (
            "üìä *–ú–æ–¥—É–ª—å–Ω–∏–π –¶–µ–Ω—Ç—Ä*\n\n"
            "üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤: {total_modules}\n"
            "üíé –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è Pro: {pro_modules}\n"
            "üèÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è Pro+: {pro_plus_modules}\n\n"
            "üéÆ *–Ü–≥—Ä–∏*: {game_modules}\n"
            "‚öôÔ∏è *–ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó*: {group_modules}\n"
            "üîß *–ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏*: {utility_modules}\n"
            "üóÉ *–Ü–Ω—à—ñ –º–æ–¥—É–ª—ñ*: {other_modules}\n\n"
            "üìú –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ."
        ).format(
            total_modules=total_modules,
            pro_modules=pro_modules,
            pro_plus_modules=pro_plus_modules,
            game_modules=game_modules,
            group_modules=group_modules,
            utility_modules=utility_modules,
            other_modules=other_modules
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        await message.answer(menu_message, parse_mode="Markdown")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫
        if game_modules > 0:
            keyboard_buttons.append([KeyboardButton(text="üéÆ –Ü–≥—Ä–∏")])
        if group_modules > 0:
            keyboard_buttons.append([KeyboardButton(text="‚öôÔ∏è –ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó")])
        if utility_modules > 0:
            keyboard_buttons.append([KeyboardButton(text="üîß –ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏")])
        if other_modules > 0:
            keyboard_buttons.append([KeyboardButton(text="üóÉ –Ü–Ω—à—ñ –º–æ–¥—É–ª—ñ")])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)

    router.message.register(command_start_handler)
    router.message.register(activate_module_handler)
    router.message.register(menu_command_handler)
