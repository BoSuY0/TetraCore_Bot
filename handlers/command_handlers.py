import os
import json
from aiogram import Router, Bot, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from core.module import ModuleManager
import logging

logger = logging.getLogger(__name__)

def get_modules_list(modules, page: int = 0):
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    modules_per_page = 10
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–¥—É–ª—ñ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_index = page * modules_per_page
    end_index = start_index + modules_per_page
    current_page_modules = modules[start_index:end_index]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –º–æ–¥—É–ª—ñ–≤
    message_text = "\n".join([f"{i+1}. {module}" for i, module in enumerate(current_page_modules, start=start_index)])
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page > 0:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"page_{page-1}"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É –º–æ–¥—É–ª—è
    keyboard.add(InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data="search_module"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if end_index < len(modules):
        keyboard.add(InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data=f"page_{page+1}"))
    
    return message_text, keyboard

def setup_handlers(router: Router, bot: Bot, module_manager: ModuleManager, admin_checker, group_settings):
    
    @router.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} –≤ —á–∞—Ç—ñ {message.chat.id}")
        
        data = await state.get_data()
        
        if "started" not in data:
            welcome_message = (
                "üëã –ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç!\n\n"
                "–Ø ‚Äî *TetraCore*, –≤–∞—à –≤—ñ—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ Telegram. üåê\n\n"
                "–ú–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–æ—Å–≤—ñ–¥ —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ç—É–∂–Ω–∏—Ö —ñ –∫–æ—Ä–∏—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤. "
                "–ó—ñ –º–Ω–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —ñ–≥—Ä–∏ üéÆ, –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä—É–ø–æ—é ‚öôÔ∏è, —ñ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! "
                "–ü—Ä–æ—Å—Ç–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /menu, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó.\n\n"
                "üí° *–ü–æ—Ä–∞–¥–∞*: –Ø–∫—â–æ –≤–∏ –º–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –¥–æ–ø–æ–º–æ–≥–∏, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ!"
            )
            await message.answer(welcome_message, parse_mode="Markdown")
            
            await state.update_data(started=True)
        else:
            await menu_command_handler(message)

    @router.message(Command("activate"))
    async def activate_module_handler(message: Message) -> None:
        if message.chat.type != 'private':
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) > 1:
                module_name = command_parts[1]
                if await module_manager.check_admin_rights(message):
                    await module_manager.activate_module(message, module_name)
            else:
                await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /activate [–Ω–∞–∑–≤–∞_–º–æ–¥—É–ª—è]")
        else:
            await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")

    @router.message(Command("menu"))
    async def menu_command_handler(message: Message) -> None:
        modules_path = "modules/"
        
        if not os.path.exists(modules_path):
            await message.answer("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ –º–æ–¥—É–ª—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        total_modules = 0
        pro_modules = 0
        pro_plus_modules = 0
        game_modules = 0
        group_modules = 0
        utility_modules = 0
        other_modules = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –º–æ–¥—É–ª—è—Ö —ñ —Ä–∞—Ö—É—î–º–æ —ó—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        for module_name in os.listdir(modules_path):
            module_dir = os.path.join(modules_path, module_name)
            if os.path.isdir(module_dir):
                module_info_path = os.path.join(module_dir, "module_info.json")
                if os.path.exists(module_info_path):
                    try:
                        with open(module_info_path, "r") as f:
                            module_info = json.load(f)
                    except json.JSONDecodeError:
                        await message.answer(f"–§–∞–π–ª {module_info_path} –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏ —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π.")
                        continue
                    
                    total_modules += 1
                    category = module_info.get("category", "–Ü–Ω—à–µ")
                    access_level = module_info.get("access_level", "free")
                    
                    if access_level == "pro":
                        pro_modules += 1
                    elif access_level == "pro_plus":
                        pro_plus_modules += 1

                    if category == "–Ü–≥—Ä–∏":
                        game_modules += 1
                    elif category == "–ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó":
                        group_modules += 1
                    elif category == "–ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏":
                        utility_modules += 1
                    else:
                        other_modules += 1
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–æ–¥—É–ª—ñ
        menu_message = (
            "üìä *–ú–æ–¥—É–ª—å–Ω–∏–π –¶–µ–Ω—Ç—Ä*\n\n"
            "üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤: {total_modules}\n"
            "üíé –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è Pro: {pro_modules}\n"
            "üèÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è Pro+: {pro_plus_modules}\n\n"
            "üéÆ *–Ü–≥—Ä–∏*: {game_modules}\n"
            "‚öôÔ∏è *–ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó*: {group_modules}\n"
            "üîß *–ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏*: {utility_modules}\n"
            "üóÉ *–Ü–Ω—à—ñ –º–æ–¥—É–ª—ñ*: {other_modules}\n\n"
            "üìú –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥—É–ª—ñ."
        ).format(
            total_modules=total_modules,
            pro_modules=pro_modules,
            pro_plus_modules=pro_plus_modules,
            game_modules=game_modules,
            group_modules=group_modules,
            utility_modules=utility_modules,
            other_modules=other_modules
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        await message.answer(menu_message, parse_mode="Markdown")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        if game_modules > 0:
            keyboard.add(KeyboardButton(text="üéÆ –Ü–≥—Ä–∏"))
        if group_modules > 0:
            keyboard.add(KeyboardButton(text="‚öôÔ∏è –ì—Ä—É–ø–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"))
        if utility_modules > 0:
            keyboard.add(KeyboardButton(text="üîß –ö–æ—Ä–∏—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"))
        if other_modules > 0:
            keyboard.add(KeyboardButton(text="üóÉ –Ü–Ω—à—ñ –º–æ–¥—É–ª—ñ"))

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)

    @router.callback_query(lambda c: c.data and c.data.startswith('page_'))
    async def process_page_callback(callback_query: types.CallbackQuery):
        page = int(callback_query.data.split('_')[1])
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª—ñ–≤ (–∑–∞–º—ñ–Ω–∏ —Ü–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —à–ª—è—Ö —á–∏ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤)
        modules = ["module1", "module2", "module3", "module4", "module5", 
                   "module6", "module7", "module8", "module9", "module10",
                   "module11", "module12"]
        
        message_text, keyboard = get_modules_list(modules, page)
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=message_text,
            reply_markup=keyboard
        )

    @router.callback_query(lambda c: c.data == "search_module")
    async def process_search_callback(callback_query: types.CallbackQuery):
        await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥—É–ª—è –¥–ª—è –ø–æ—à—É–∫—É:")

    @router.message(lambda message: message.text)
    async def process_module_search(message: types.Message):
        search_query = message.text.lower()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª—ñ–≤ (–∑–∞–º—ñ–Ω–∏ —Ü–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —à–ª—è—Ö —á–∏ –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤)
        modules = ["module1", "module2", "module3", "module4", "module5", 
                   "module6", "module7", "module8", "module9", "module10",
                   "module11", "module12"]
        
        matched_modules = [m for m in modules if search_query in m.lower()]
        
        if matched_modules:
            message_text, keyboard = get_modules_list(matched_modules)
            await message.answer(text=message_text, reply_markup=keyboard)
        else:
            await message.answer("–ú–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    router.message.register(command_start_handler)
    router.message.register(activate_module_handler)
    router.message.register(menu_command_handler)
    router.callback_query.register(process_page_callback)
    router.callback_query.register(process_search_callback)
    router.message.register(process_module_search)
