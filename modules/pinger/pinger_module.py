from telethon import TelegramClient, errors
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch
import asyncio
import logging
import html
from aiogram import Bot
from config import API_ID, API_HASH, BOT_TOKEN  # –Ü–º–ø–æ—Ä—Ç –∑–º—ñ–Ω–Ω–∏—Ö –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É

logger = logging.getLogger(__name__)

client = None

async def initialize_client():
    global client
    if client is None or not client.is_connected():
        client = TelegramClient('bot_session', API_ID, API_HASH)
        await client.start(bot_token=BOT_TOKEN)
        logger.info("Telethon client started")

async def get_all_members(chat_id):
    try:
        await initialize_client()
        chat = await client.get_entity(chat_id)
        all_participants = []
        offset = 0
        limit = 200
        while True:
            try:
                participants = await client(GetParticipantsRequest(
                    chat, ChannelParticipantsSearch(''), offset, limit,
                    hash=0
                ))
                if not participants.users:
                    break
                all_participants.extend(participants.users)
                offset += len(participants.users)
            except errors.ChatAdminRequiredError:
                logger.error("Bot needs to be an admin to fetch all members")
                return []
    except errors.ChannelPrivateError:
        logger.error("The channel/supergroup is private")
        return []
    except Exception as e:
        logger.error(f"Error in get_all_members: {e}")
        return []
    
    return all_participants

async def zaz_all(message, module_manager, bot: Bot):
    if not module_manager.is_module_active(message.chat.id, "pinger"):
        await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–æ–¥—É–ª—ñ '–ü—ñ–Ω–≥–µ—Ä —É—á–∞—Å–Ω–∏–∫—ñ–≤'. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.")
        return

    try:
        logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è zaz_all –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}")
        
        command_parts = message.text.split(maxsplit=1)
        custom_text = command_parts[1] if len(command_parts) > 1 else ""

        participants = await get_all_members(message.chat.id)
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(participants)} —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}")
        
        if not participants:
            await bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
            return

        mentions = []
        for user in participants:
            if user.bot:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç—ñ–≤
            if user.username:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ö–æ–∂–∏–π Unicode —Å–∏–º–≤–æ–ª –¥–ª—è –º–∞—Å–∫—É–≤–∞–Ω–Ω—è '@'
                masked_username = user.username.replace('@', '\u200B@\u200B')
                mention = f'<a href="tg://user?id={user.id}">{masked_username}</a>'
            else:
                user_name = html.escape(user.first_name or f"User{user.id}")
                mention = f'<a href="tg://user?id={user.id}">{user_name}</a>'
            mentions.append(mention)
            logger.debug(f"–î–æ–¥–∞–Ω–æ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id} –≤ –≥—Ä—É–ø—ñ {message.chat.id}: {mention}")

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ 10
        max_mentions_per_message = 10
        mention_chunks = [mentions[i:i + max_mentions_per_message] for i in range(0, len(mentions), max_mentions_per_message)]

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∞–º–∏
        for i, chunk in enumerate(mention_chunks, 1):
            mentions_text = ", ".join(chunk)
            chunk_message = f"{custom_text}\n\n{mentions_text}\n\n–ß–∞—Å—Ç–∏–Ω–∞ {i}/{len(mention_chunks)}"
            
            try:
                sent_message = await bot.send_message(message.chat.id, chunk_message, parse_mode="HTML")
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–∏–Ω—É {i}/{len(mention_chunks)} –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}")
                logger.debug(f"–ó–º—ñ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {sent_message.text[:100]}...")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É {i} –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}: {e}")
                await bot.send_message(message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ {i} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            
            await asyncio.sleep(0.5)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        summary_message = f"\n\n–ó–≥–∞–¥–∞–Ω–æ {len(mentions)} —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n–Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–≥—É–∫–Ω—ñ—Ç—å—Å—è! üëã"
        await bot.send_message(message.chat.id, summary_message)
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è zaz_all –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}")

    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ zaz_all –¥–ª—è –≥—Ä—É–ø–∏ {message.chat.id}: {e}", exc_info=True)
        await bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.")
